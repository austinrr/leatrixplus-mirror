# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  collect-version-information:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      MY_FILENAME: ${{ steps.set-envvar-prev-release.outputs.prev-release-filename }}
      CURSE_FILENAME: ${{ steps.curl-curseforge.outputs.latest_curse_filename }}
      CURSE_FILEID: ${{ steps.curl-curseforge.outputs.latest_curse_fileid }}
        
    # Get Version of Last Release
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      #- name: Get Latest Zip
      #  id: get_latest_zip
      #  run: echo "LATEST_FILE_NAME=$(ls -rt *.zip | head -1)" >> "$GITHUB_OUTPUT"

      - name: Get Previous Release JSON Asset
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          filename: release.json
          out-file-path: "previous-release"

      - name: Set Env Var for Previous Release
        id: set-envvar-prev-release
        run: echo "prev-release-filename=$(cat previous-release/release.json | jq '.releases[0].filename')" >> "$GITHUB_OUTPUT"
        
      - name: cUrl Curseforge
        id: curl-curseforge
        run: |
          curl -H 'Accept: application/json' \
            'https://www.curseforge.com/api/v1/mods/322362/files?pageIndex=0&pageSize=10&sort=dateCreated&sortDescending=true&gameFlavorId=67408&removeAlphas=true' \
            -o curse-response.json
          fileNameRaw=$(cat curse-response.json | jq -r '.data[0].fileName')
          fileNameFixed=${fileNameRaw%.*}
          echo "latest_curse_fileid=$(cat curse-response.json | jq -r '.data[0].id')" >> "$GITHUB_OUTPUT"
          echo "latest_curse_filename=${fileNameFixed}" >> "$GITHUB_OUTPUT"

  # Download Job
  download-newer-version:
    name: Download Newer Verion from CurseForge
    needs: collect-version-information
    runs-on: ubuntu-latest

    env:
      MY_FILENAME: ${{ needs.collect-version-information.outputs.MY_FILENAME }}
      CURSE_FILENAME: ${{ needs.collect-version-information.outputs.CURSE_FILENAME }}
      CURSE_FILEID: ${{ needs.collect-version-information.outputs.CURSE_FILEID }}

    outputs:
      CURSE_FILENAME: ${{ needs.collect-version-information.outputs.CURSE_FILENAME }}
      
    # if: ${{ needs.collect-version-information.outputs.latest_curse_filename != needs.collect-version-information.outputs.latest_curse_fileid }}
    # if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Test
        run: |
          echo "MY_FILENAME: $MY_FILENAME"
          echo "CURSE_FILENAME: $CURSE_FILENAME"
          echo "CURSE_FILEID: $CURSE_FILEID"
    
      - name: Download Newer Version from Curse
        id: donwload-newer-version
        if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}
        run: |
          echo "New version detected! $CURSE_FILENAME"
          curl -O https://mediafilez.forgecdn.net/files/${CURSE_FILEID:0:4}/${CURSE_FILEID:4:3}/${CURSE_FILENAME}.zip
      
      - name: Unzip Addon Package
        id: unzip_addon_pkg
        if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}
        run: unzip ${CURSE_FILENAME}.zip

      - name: Get Interface Version Number
        id: get_interface_version_num
        if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}
        run: |
          cd Leatrix_Plus/
          echo "get_interface_version_num=$(cat *.toc | sed -n -E -e 's/^## Interface: ([0-9]+).*/\1/p')" >> "$GITHUB_OUTPUT"

      - name: Set filename in release.json
        if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}
        uses: jossef/action-set-json-field@v2.1
        with:
          file: release.json
          field: releases.filename
          value: $env.CURSE_FILENAME

      - name: Set interface in release.json
        if: ${{ env.MY_FILENAME != env.CURSE_FILENAME }}
        uses: jossef/action-set-json-field@v2.1
        with:
          file: release.json
          field: releases.metadata.interface
          value: ${{ steps.get_interface_version_num.outputs.get_interface_version_num }}


  # Make Release Job
  make-release:
    needs: download-newer-version
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      CURSE_FILENAME: ${{ needs.download-newer-version.outputs.CURSE_FILENAME }}

    steps:
      - uses: actions/checkout@v3
  
      - name: Make Tag
        id: make-tag
        run: echo "tag=v$(echo $CURSE_FILENAME | sed 's/.*-\(.*\)-.*/\1/')" >> "GITHUB_OUTPUT"

      - name: Test
        run: |
          echo $CURSE_FILENAME
          echo ${{ steps.make-tag.outputs.tag }}
        
      - name: Make Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${CURSE_FILENAME},release.json"
          tag: ${{ steps.make-tag.outputs.tag }}
          
          
        
        
          


      

        
        
            

          
          
          
