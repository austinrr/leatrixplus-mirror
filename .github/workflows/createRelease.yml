# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  collect-version-information:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      
      - name: Get Latest Zip
        id: get_latest_zip
        run: echo "LATEST_FILE_NAME=$(ls -rt *.zip | head -1)" >> "$GITHUB_OUTPUT"

      # Runs a set of commands using the runners shell
      - name: Use Latest Zip
        env:
          LATEST_FILE_NAME: ${{ steps.get_latest_zip.outputs.LATEST_FILE_NAME }}
        run: echo "The latest file is $LATEST_FILE_NAME"

      - name: Unzip Addon Package
        id: unzip_addon_pkg
        run: unzip ${{ steps.get_latest_zip.outputs.LATEST_FILE_NAME }}

      - name: Get Interface Version Number
        id: get_interface_version_num
        run: |
          cd Leatrix_Plus/
          echo "get_interface_version_num=$(cat *.toc | sed -n -E -e 's/^## Interface: ([0-9]+).*/\1/p')" >> "$GITHUB_OUTPUT"

      - name: Set filename in release.json
        uses: jossef/action-set-json-field@v2.1
        with:
          file: release.json
          field: releases.filename
          value: ${{ steps.get_latest_zip.outputs.LATEST_FILE_NAME }}

      - name: Set interface in release.json
        uses: jossef/action-set-json-field@v2.1
        with:
          file: release.json
          field: releases.metadata.interface
          value: ${{ steps.get_interface_version_num.outputs.get_interface_version_num }}

      - name: Get Previous Release JSON Asset
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          filename: release.json
          out-file-path: "previous-release"

      - name: Set Env Var for Previous Release
        id: set-envvar-prev-release
        run: echo "prev-release-filename=$(cat previous-release/release.json | jq '.releases[0].filename')" >> "$GITHUB_OUTPUT"
        
      - name: cUrl Curseforge
        id: curl-curseforge
        run: |
          curl -H 'Accept: application/json' \
            'https://www.curseforge.com/api/v1/mods/322362/files?pageIndex=0&pageSize=10&sort=dateCreated&sortDescending=true&gameFlavorId=67408&removeAlphas=true' \
            -o curse-response.json
          fileNameRaw=$(cat curse-response.json | jq -r '.data[0].fileName')
          fileNameFixed=${fileNameRaw%.*}
          echo "latest-curse-fileid=$(cat curse-response.json | jq -r '.data[0].id')" >> "$GITHUB_OUTPUT"
          echo "latest-curse-filename=${fileNameFixed}" >> "$GITHUB_OUTPUT"
          echo $latest-curse-fileid
          echo $latest-curse-filename
  

      - name: Download Newer Version from Curse
        id: donwload-newer-version
        env:
          CURSE_FILENAME: ${{ steps.curl-curseforge.outputs.latest-curse-filename }}
          MY_FILENAME: ${{ steps.set-envvar-prev-release.outputs.prev-release-filename }}
        if: ${{ env.CURSE_FILENAME != env.MY_FILENAME }}
        run: echo "new version detected"


      

        
        
            

          
          
          
